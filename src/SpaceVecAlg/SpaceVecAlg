/*
 * Copyright 2012-2019 CNRS-UM LIRMM, CNRS-AIST JRL
 */

#pragma once

// std
#include <limits>
#include <ostream>

// eigen
#include <Eigen/Core>
#include <Eigen/Geometry>

// utility
#include "EigenTypedef.h"
#include "EigenUtility.h"
#include "MathFunc.h"

// forward declaration
namespace sva
{
	template<typename T> class MotionVec;
	template<typename T> class ForceVec;
	template<typename T> class RBInertia;
	template<typename T> class ABInertia;
	template<typename T> class PTransform;
}

#include "MotionVec.h"
#include "ForceVec.h"
#include "ImpedanceVec.h"
#include "AdmittanceVec.h"
#include "RBInertia.h"
#include "ABInertia.h"
#include "PTransform.h"
#include "Operators.h"

// typedef
namespace sva
{
	typedef MotionVec<double> MotionVecd;
	typedef ForceVec<double> ForceVecd;
	typedef ImpedanceVec<double> ImpedanceVecd;
	typedef AdmittanceVec<double> AdmittanceVecd;
	typedef RBInertia<double> RBInertiad;
	typedef ABInertia<double> ABInertiad;
	typedef PTransform<double> PTransformd;
}
